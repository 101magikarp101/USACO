template <class T> class MaxSegTree {
	//MUST BE 0-INDEXED
  private:
	const T DEFAULT = std::numeric_limits<T>().min();
	vector<T> segtree;
	int len;
  public:
	MaxSegTree(int len) : len(len), segtree(len * 4, DEFAULT) {}
	void build() {
		for (int i = len - 1; i > 0; i--) {
			segtree[i] = std::max(segtree[i * 2], segtree[i * 2 + 1]);
		}
	}
	void set(int ind, T val) {
		ind += len;
		segtree[ind] = val;
		for (; ind > 1; ind /= 2) {
			segtree[ind / 2] = std::max(segtree[ind], segtree[ind ^ 1]);
		}
	}
	/** @return the maximum element in the range [start, end) */
	T range_max(int start, int end) {
		T max = DEFAULT;
		for (start += len, end += len; start < end; start /= 2, end /= 2) {
			if (start % 2 == 1) { max = std::max(max, segtree[start++]); }
			if (end % 2 == 1) { max = std::max(max, segtree[--end]); }
		}
		return max;
	}
};